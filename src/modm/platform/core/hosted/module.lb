#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

from sys import platform as sys_platform

def init(module):
    module.name = ":platform:core"
    module.description = "Hosted Core"

def prepare(module, options):
    if options[":target"].identifier.platform != "hosted" and not options[":target"].identifier.platform.startswith("mock-"):
        return False

    module.depends(
        ":architecture:assert",
        ":architecture:memory",
        ":debug")

    return True

def build(env):
    target = env[":target"].identifier
    env.substitutions = {"target": target}
    env.outbasepath = "modm/src/modm/platform/core"
    
    if env[":target"].identifier.platform == "hosted":
        # "hosted" environment, building an app targeted for a particular family
        env.substitutions["hosted_target"] = env[":target"].identifier.family
    elif env[":target"].identifier.platform.startswith("mock-"):
        # "mock" environment, building an embedded app with mock implementations
        # to run on current host family
        # TODO: Error on other platforms?
        modm_name = {"win32": "windows", "linux": "linux", "darwin": "darwin"}[sys_platform]
        env.substitutions["hosted_target"] = modm_name
    else:
        # normal embedded target; not hosted
        env.substitutions["hosted_target"] = None

    env.copy("memory.cpp")

    if env.has_module(":architecture:atomic"):
        env.copy("atomic_lock.hpp")

    if env.has_module(":architecture:unaligned"):
        env.copy("../avr/unaligned.hpp", "unaligned.hpp")

    if env.has_module(":architecture:accessor"):
        env.copy("../cortex/flash_reader.hpp", "flash_reader.hpp")

    if env.has_module(":architecture:clock"):
        # modm-test implements the clock methods itself
        if not env.has_module(":test:architecture"):
            env.template("clock.cpp.in")

    env.template("assert.cpp.in")
    if env.has_module(":architecture:delay"):
        env.template("delay.hpp.in")
