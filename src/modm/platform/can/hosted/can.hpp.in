/*
 * Copyright (c) 2013-2014, 2016, Kevin LÃ¤ufer
 * Copyright (c) 2014, 2017, Sascha Schade
 * Copyright (c) 2014-2018, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 * Copyright (c) 2018, Christopher Durand
 * Copyright (c) 2020, Matthew Arnold
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_WINDOWS_CAN{{ id }}_HPP
#define MODM_WINDOWS_CAN{{ id }}_HPP

#include <modm/architecture/interface/can.hpp>
#include <modm/platform/gpio/connector.hpp>
#include <modm/container/doubly_linked_list.hpp>

namespace modm
{

namespace platform
{

/**
 * @brief		Basic Extended CAN{{ id }} simulator
 * 				Current functionality: writes and read from tx and rx buffers.
 * 				Further implementation todo.
 *
 * @author		Matthew Arnold
 * @ingroup		modm_platform_can{% if id | length %} modm_platform_can_{{id}}{% endif %}
 */
class Can{{ id }} : public ::modm::Can
{
public:	// Expose jinja template parameters to be checked by e.g. drivers or application
	static constexpr size_t RxBufferSize = {{ options["buffer.rx"] }};
	static constexpr size_t TxBufferSize = {{ options["buffer.tx"] }};

	template< template<Peripheral _> class... Signals >
	static void
	connect(Gpio::InputType inputType = Gpio::InputType::Floating)
	{
        // no-op
    }

	template< class SystemClock, bitrate_t bitrate=kbps(125), percent_t tolerance=pct(1) >
	static inline void
	initialize(	uint32_t interruptPriority, Mode startupMode = Mode::Normal,
				bool overwriteOnOverrun = true)
	{
		// no-op
	}

	/**
	 * The the operating mode.
	 *
	 * Default after initialization is the normal mode.
	 */
	static void
	setMode(Mode mode);

	static void
	setAutomaticRetransmission(bool retransmission);

	// Can Interface Methods
	static bool
	isMessageAvailable();

	static bool
	getMessage(can::Message& message, uint8_t *filter_id=nullptr);

	static bool
	isReadyToSend();

	static bool
	sendMessage(const can::Message& message);

	static inline uint8_t
	getReceiveErrorCounter()
	{
        return 0;  // error count NA
	}

	/**
	 * Get Transmit Error Counter.
	 *
	 */
	static inline uint8_t
	getTransmitErrorCounter()
	{
        return 0;  // error count NA
	}

	static BusState
	getBusState();

	static void
	enableStatusChangeInterrupt(uint32_t interruptEnable,
			uint32_t interruptPriority);
};

}	// namespace platform

}	// namespace modm

#endif	//  MODM_WINDOWS_CAN{{ id }}_HPP
