/*
 * Copyright (c) 2011-2012, 2017, Fabian Greif
 * Copyright (c) 2012-2014, 2016-2017, Sascha Schade
 * Copyright (c) 2013-2014, 2016, Kevin LÃ¤ufer
 * Copyright (c) 2014, Georgi Grinshpun
 * Copyright (c) 2014, 2016-2018, Niklas Hauser
 * Copyright (c) 2018, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include <string.h>  /* for memcpy */
#include <modm/utils.hpp>
%% if id == ""
#include "can.hpp"
%% else
#include "can_{{ id }}.hpp"
%% endif

// ----------------------------------------------------------------------------
modm::DoublyLinkedList<modm::can::Message> txQueue;

typedef struct {
    modm::can::Message message;
    uint8_t filter_id;
} RxMessage;

modm::DoublyLinkedList<RxMessage> rxQueue;
// ----------------------------------------------------------------------------
void
modm::platform::Can{{ id }}::setMode(Mode mode)
{
    // no-op
}

// ----------------------------------------------------------------------------
void
modm::platform::Can{{ id }}::setAutomaticRetransmission(bool retransmission)
{
    // no-op
}

// ----------------------------------------------------------------------------
bool
modm::platform::Can{{ id }}::isMessageAvailable()
{
    return !rxQueue.isEmpty();
}

// ----------------------------------------------------------------------------
bool
modm::platform::Can{{ id }}::getMessage(can::Message& message, uint8_t *filter_id)
{
    if (rxQueue.isEmpty())
    {
        // no message in the receive buffer
        return false;
    }
    else {
        auto& rxMessage = rxQueue.getFront();
        memcpy(&message, &rxMessage.message, sizeof(message));
        if(filter_id != nullptr) (*filter_id) = rxMessage.filter_id;
        rxQueue.removeFront();
        return true;
    }
}

// ----------------------------------------------------------------------------
bool
modm::platform::Can{{ id }}::isReadyToSend()
{
    return !txQueue.isEmpty();
}

// ----------------------------------------------------------------------------
bool
modm::platform::Can{{ id }}::sendMessage(const can::Message& message)
{
    if (txQueue.getSize() >= TxBufferSize)
    {
		// todo do something with this
        txQueue.removeFront();
    }
    txQueue.append(message);
}

// ----------------------------------------------------------------------------
modm::platform::Can{{ id }}::BusState
modm::platform::Can{{ id }}::getBusState()
{
    return BusState::Connected;  // assume it is always working
}

// ----------------------------------------------------------------------------
void
modm::platform::Can{{ id }}::enableStatusChangeInterrupt(uint32_t interruptEnable,
                                                  uint32_t interruptPriority)
{
    // no-op
}
