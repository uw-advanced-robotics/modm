/*
 * Copyright (c) 2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_GPIO_SET_HPP
#define MODM_STM32_GPIO_SET_HPP

#include "base.hpp"

namespace modm
{

namespace platform
{

/// @ingroup modm_platform_gpio
template< class... Gpios >
class GpioSet : public Gpio
{
protected:
	static constexpr uint16_t inverteds[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == Port::{{port}} and Gpios::isInverted) ? Gpios::mask : 0) | ...),
%% endfor
	};
	static constexpr uint16_t inverted(uint8_t id) { return inverteds[id]; }

	static constexpr uint16_t masks[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == Port::{{port}}) ? Gpios::mask : 0) | ...),
%% endfor
	};
	static constexpr uint16_t mask(uint8_t id) { return masks[id]; }
	static constexpr uint32_t mask2(uint8_t id, uint8_t value = 0b11) {
		uint32_t r{0};
		for (int ii=0; ii<16; ii++)
			if (masks[id] & (1 << ii)) r |= (uint32_t(value) << (ii * 2));
		return r;
	}

	static constexpr uint8_t numberOfPorts() { return 0; }
public:
	static constexpr uint8_t width = sizeof...(Gpios);
	static constexpr uint8_t number_of_ports = numberOfPorts();
public:
	static void setOutput()
	{}

	static void setOutput(bool status)
	{
		set(status);
		setOutput();
	}

	static void setOutput(OutputType, OutputSpeed)
	{}

	static void configure(OutputType, OutputSpeed)
	{}

	static void setInput()
	{}

	static void setInput(InputType)
	{}

	static void setAnalogInput()
	{}

	static void configure(InputType)
	{}

	static void set()
	{}

	static void set(bool status)
	{
		if (status) set();
		else        reset();
	}

	static void reset()
	{}

	static void toggle()
	{}

	static void lock()
	{}

	static void disconnect()
	{
		(Gpios::disconnect(), ...);
	}
};

} // namespace platform

} // namespace modm

#endif // MODM_STM32_GPIO_SET_HPP
