/*
 * Copyright (c) 2017-2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set port = gpio["port"] | upper
%% set reg  = "GPIO" ~ port
%% set pin  = gpio["pin"]

#ifndef MODM_STM32_GPIO_PIN_{{ port ~ pin }}_HPP
#define MODM_STM32_GPIO_PIN_{{ port ~ pin }}_HPP

%% if not is_mock
#include "../device.hpp"
%% endif
#include "base.hpp"
#include "set.hpp"

namespace modm::platform
{

/// @cond
class Gpio{{ port ~ pin }};
using GpioOutput{{ port ~ pin }} = Gpio{{ port ~ pin }};
using GpioInput{{ port ~ pin }}  = Gpio{{ port ~ pin }};
/// @endcond

/// IO class for Pin {{port ~ pin}}
/// @ingroup	modm_platform_gpio
class Gpio{{ port ~ pin }} : public Gpio, public ::modm::GpioIO
{
	template<class... Gpios>
	friend class GpioSet;
	using PinSet = GpioSet<Gpio{{ port ~ pin }}>;
	friend class Adc;
	friend class Adc1; friend class Adc2;
	friend class Adc3; friend class Adc4;
public:
	using Output = Gpio{{ port ~ pin }};
	using Input = Gpio{{ port ~ pin }};
	using IO = Gpio{{ port ~ pin }};
	using Type = Gpio{{ port ~ pin }};
	static constexpr bool isInverted = false;
	static constexpr Port port = Port::{{port}}; ///< Port name
	static constexpr uint8_t pin = {{pin}}; ///< Pin number

protected:
%% if not is_mock
	/// Bitmask for registers that contain a 1bit value for every pin.
	static constexpr uint16_t mask  = 0x1 << pin;
	/// Bitmask for registers that contain a 2bit value for every pin.
	static constexpr uint32_t mask2 = 0x3 << (pin * 2);
	/// Port Number.
	static constexpr uint8_t port_nr = uint8_t(port);
	/// Alternate Function register id. 0 for pin 0-7. 1 for pin 8-15.
	static constexpr uint8_t af_id  = pin / 8;
	/// Alternate Function offset.
	static constexpr uint8_t af_offset = (pin * 4) % 32;
	/// Alternate Function register mask.
	static constexpr uint32_t af_mask  = 0xf << af_offset;
	/// ExternalInterruptIRQ
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI{{ exti_irqn }}_IRQn;
%% endif

public:
	/// @cond
	inline static void setAlternateFunction(uint8_t af) {
		%% if not is_mock
		{{reg}}->AFR[af_id] = ({{reg}}->AFR[af_id] & ~af_mask) | ((af & 0xf) << af_offset);
		{{reg}}->MODER = ({{reg}}->MODER & ~mask2) | (i(Mode::AlternateFunction) << (pin * 2));
		%% endif
	}

	/// Enable Analog Mode which is needed to use this pin as an ADC input.
	inline static void setAnalogInput() { PinSet::setAnalogInput(); }
	/// @endcond

public:
	// GpioOutput
	// start documentation inherited
	inline static void setOutput() { PinSet::setOutput(); }
	inline static void setOutput(bool status) { PinSet::setOutput(status); }
	inline static void set() { PinSet::set(); }
	inline static void set(bool status) { PinSet::set(status); }
	inline static void reset() { PinSet::reset(); }
	inline static void toggle() {
		if (isSet()) { reset(); }
		else         { set();   }
	}
	%% if is_mock
	inline static bool isSet() { return false; }
	%% else
	inline static bool isSet() { return ({{reg}}->ODR & mask); }
	%% endif
	// stop documentation inherited
	inline static void configure(OutputType type, OutputSpeed speed = OutputSpeed::MHz50) { PinSet::configure(type, speed); }
	inline static void setOutput(OutputType type, OutputSpeed speed = OutputSpeed::MHz50) { PinSet::setOutput(type, speed); }
	// GpioInput
	// start documentation inherited
	inline static void setInput() { PinSet::setInput(); }
	%% if is_mock
	inline static bool read() { return false; }
	%% else
	inline static bool read() { return ({{reg}}->IDR & mask); }
	%% endif
	// end documentation inherited
	inline static void configure(InputType type) { PinSet::configure(type); }
	inline static void setInput(InputType type) { PinSet::setInput(type); }
	// External Interrupts
	// Warning: This will disable any previously enabled interrupt which is
	// routed to the same interupt line, e.g. PA3 will disable PB3.
	// This is a hardware limitation by the STM32 EXTI.
	inline static void enableExternalInterrupt()
	{
		%% if not is_mock
		// PA[x], x =  0 ..  3 maps to EXTICR[0]
		// PA[x], x =  4 ..  7 maps to EXTICR[1]
		// PA[x], x =  8 .. 11 maps to EXTICR[2]
		// PA[x], x = 12 .. 15 maps to EXTICR[3]
		// => bit3 and bit2 (mask 0x0c) specify the register
		// => bit1 and bit0 (mask 0x03) specify the bit position
		constexpr uint8_t index   = (pin & 0b1100) >> 2;
		constexpr uint8_t bit_pos = (pin & 0b0011) << 2;
		constexpr uint16_t syscfg_mask = (0b1111) << bit_pos;
		constexpr uint16_t syscfg_value = (port_nr & (0b1111)) << bit_pos;
%% if target.family in ["g0"]
		EXTI->EXTICR[index] = (EXTI->EXTICR[index] & ~syscfg_mask) | syscfg_value;
%% else
		SYSCFG->EXTICR[index] = (SYSCFG->EXTICR[index] & ~syscfg_mask) | syscfg_value;
%% endif
		EXTI->IMR{{pf}} |= mask;
		%% endif
	}
	%% if is_mock
	inline static void disableExternalInterrupt() {}
	inline static void enableExternalInterruptVector(const uint32_t priority) {}
	inline static void disableExternalInterruptVector() {}
	%% else
	inline static void disableExternalInterrupt() { EXTI->IMR{{pf}} &= ~mask; }
	inline static void enableExternalInterruptVector(const uint32_t priority)
	{
		NVIC_SetPriority(ExternalInterruptIRQ, priority);
		NVIC_EnableIRQ(ExternalInterruptIRQ);
	}
	inline static void disableExternalInterruptVector() { NVIC_DisableIRQ(ExternalInterruptIRQ); }
	%% endif
	inline static void setInputTrigger(const InputTrigger trigger)
	{
		%% if not is_mock
		switch (trigger)
		{
		case InputTrigger::RisingEdge:
			EXTI->RTSR{{pf}} |=  mask;
			EXTI->FTSR{{pf}} &= ~mask;
			break;
		case InputTrigger::FallingEdge:
			EXTI->RTSR{{pf}} &= ~mask;
			EXTI->FTSR{{pf}} |=  mask;
			break;
		case InputTrigger::BothEdges:
			EXTI->RTSR{{pf}} |=  mask;
			EXTI->FTSR{{pf}} |=  mask;
			break;
		}
		%% endif
	}
%% if is_mock
	inline static bool getExternalInterruptFlag() { return false; }
	inline static void acknowledgeExternalInterruptFlag() {}
%% else
%% if target.family in ["g0"]
	inline static bool getExternalInterruptFlag()
	{ return (EXTI->FPR1 & mask) | (EXTI->RPR1 & mask); }
	inline static void acknowledgeExternalInterruptFlag()
	{ EXTI->FPR1 |= mask; EXTI->RPR1 |= mask; }
%% else
	inline static bool getExternalInterruptFlag() { return (EXTI->PR{{pf}} & mask); }
	inline static void acknowledgeExternalInterruptFlag() { EXTI->PR{{pf}} = mask; }
%% endif
%% endif
	// GpioIO
	// start documentation inherited
	inline static Direction getDirection() {
		%% if not is_mock
		uint32_t mode = ({{reg}}->MODER & mask2);
		if (mode == (i(Mode::Input) << pin * 2)) {
			return Direction::In;
		}
		if (mode == (i(Mode::Output) << pin * 2)) {
			return Direction::Out;
		}
		%% endif
		return Direction::Special;
	}
	// end documentation inherited
	inline static void lock() { PinSet::lock(); }
	inline static void disconnect() {
		setInput(InputType::Floating);
	%% if not is_mock
		{{reg}}->AFR[af_id] &= ~af_mask;
	%% if target["family"] in ["l4"] and target["name"] in ["71", "75", "76", "85", "86"]
		{{reg}}->ASCR &= ~mask;
	%% endif
	%% endif

	}

public:
#ifdef __DOXYGEN__
	/// @{
	/// Connect to any software peripheral
	using BitBang = GpioSignal;
	%% for name, group in signals.items()
	/// Connect to {% for sig in group %}{{ sig.driver }}{{ "" if loop.last else " or "}}{% endfor %}
	using {{ name }} = GpioSignal;
	%% endfor
	/// @}
#endif
	/// @cond
	template< Peripheral peripheral >
	struct BitBang { static void connect();
		static_assert(
			(peripheral == Peripheral::BitBang),
			"Gpio{{ port ~ pin }}::BitBang only connects to software drivers!");
	};
	%% for signal_name, signal_group in signals.items()
	template< Peripheral peripheral >
	struct {{ signal_name }} { static void connect();
		static_assert(
		%% for signal in signal_group
			(peripheral == Peripheral::{{ signal.driver }}){% if loop.last %},{% else %} ||{% endif %}
		%% endfor
			"Gpio{{ port ~ pin }}::{{ signal_name }} only connects to {% for signal in signal_group %}{{signal.driver}}{% if not loop.last %} or {% endif %}{% endfor %}!");
	};
	%% endfor
	/// @endcond
private:
	template< Peripheral peripheral >
	static constexpr int8_t AdcChannel = -1;
};

/// @cond
template<>
struct Gpio{{ port ~ pin }}::BitBang<Peripheral::BitBang>
{
	using Gpio = Gpio{{ port ~ pin }};
	static constexpr Gpio::Signal Signal = Gpio::Signal::BitBang;
	static constexpr int af = -1;
	inline static void connect() {}
};
%% for signal_group in signals.values()
	%% for signal in signal_group
template<>
struct Gpio{{ port ~ pin }}::{{ signal.name }}<Peripheral::{{ signal.driver }}>
{
	using Gpio = Gpio{{ port ~ pin }};
	static constexpr Gpio::Signal Signal = Gpio::Signal::{{ signal.name }};
	static constexpr int af = {{ signal.af[0] if signal.af | length else -1 }};
	inline static void
	connect()
	{
		%% if signal.af | length
		setAlternateFunction({{ signal.af[0] }});
		%% elif ( signal.driver.startswith("Adc") or signal.driver.startswith("Dac")
			or signal.driver.startswith("Comp") )
		disconnect();
		setAnalogInput();
		%% endif
	}
};
		%% if signal.driver.startswith("Adc") and signal.name.startswith("In")
template<>
constexpr int8_t
Gpio{{ port ~ pin }}::AdcChannel<Peripheral::{{ signal.driver }}> = {{ signal.name.replace("In", "") }};
		%% endif
	%% endfor

%% endfor


/// @endcond

} // namespace modm::platform

#endif // MODM_STM32_GPIO_PIN_{{ port ~ pin }}_HPP
