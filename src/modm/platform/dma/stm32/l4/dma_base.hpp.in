/*
 * Copyright (c) 2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2020, Mike Wolfram
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_DMA_BASE_HPP
#define MODM_STM32_DMA_BASE_HPP

#include <stdint.h>
#include "../device.hpp"

#include <modm/architecture/interface/assert.hpp>
#include <modm/architecture/interface/interrupt.hpp>
#include <modm/architecture/interface/register.hpp>

%% set reg_prefix = "DMA_CCR"

namespace modm
{

namespace platform
{
/**
 * DMA
 *
 * @author	Kevin Laeufer
 * @author	Mike Wolfram
 * @ingroup	modm_platform_dma
 */
class DmaBase
{
public:
	// Enums
%% set channel_count = namespace(max_channels = 0)
%% for controller in dmaController
	%% if channel_count.max_channels < controller.channels
		%% set channel_count.max_channels = controller.channels
	%% endif
%% endfor
	enum class
	Channel
	{
%% for channel in range(1, channel_count.max_channels + 1)
		Channel{{ channel }}{% if channel == 1 %} = 0{% endif %},
%% endfor
	};

%% if target["family"] == "l4"
%% set request_count = namespace(max_requests = 0)
%% for channels in dma["channels"]
	%% for channel in channels.channel
		%% for request in channel.request
			%% if request_count.max_requests < request.position | int
				%% set request_count.max_requests = request.position | int
			%% endif
		%% endfor
	%% endfor
%% endfor
	enum class
	Request
	{
%% for request in range(0, request_count.max_requests + 1)
		Request{{ request }}{% if request == 0 %} = 0{% endif %},
%% endfor
	};
%% endif

	enum class
	Priority : uint32_t
	{
		Low 		= 0,
		Medium  	= {{ reg_prefix }}_PL_0,
		High 		= {{ reg_prefix }}_PL_1,
		VeryHigh 	= {{ reg_prefix }}_PL_1 | {{ reg_prefix }}_PL_0,
	};

	/// In direct mode (if the FIFO is not used)
	/// MSIZE is forced by hardware to the same value as PSIZE
	enum class
	MemoryDataSize : uint32_t
	{
		Byte 		= 0,
		Bit8 		= Byte,
		HalfWord 	= {{ reg_prefix }}_MSIZE_0,
		Bit16 		= HalfWord,
		Word 		= {{ reg_prefix }}_MSIZE_1,
		Bit32 		= Word,
	};

	enum class
	PeripheralDataSize : uint32_t
	{
		Byte 		= 0,
		Bit8 		= Byte,
		HalfWord 	= {{ reg_prefix }}_PSIZE_0,
		Bit16 		= HalfWord,
		Word 		= {{ reg_prefix }}_PSIZE_1,
		Bit32 		= Word,
	};

	enum class
	MemoryIncrementMode : uint32_t
	{
		Fixed 		= 0,
		Increment 	= {{ reg_prefix }}_MINC, ///< incremented according to MemoryDataSize
	};

	enum class
	PeripheralIncrementMode : uint32_t
	{
		Fixed 		= 0,
		Increment 	= {{ reg_prefix }}_PINC, ///< incremented according to PeripheralDataSize
	};

	enum class
	CircularMode : uint32_t
	{
		Disabled 	= 0,
		Enabled 	= {{ reg_prefix }}_CIRC, ///< circular mode
	};

	enum class
	DataTransferDirection : uint32_t
	{
		/// Source: DMA_CPARx; Sink: DMA_CMARx
		PeripheralToMemory 	= 0,
		/// Source: DMA_CMARx; Sink: DMA_CPARx
		MemoryToPeripheral 	= DMA_CCR_DIR,
		/// Source: DMA_CPARx; Sink: DMA_CMARx
		MemoryToMemory 		= DMA_CCR_MEM2MEM,
	};

	/**
	 * Peripheral signals that can be used in DMA channels
	 */
	enum class
	Signal : uint8_t {
		NoSignal,
%% for signal in dmaSignals
		{{ signal }},
%% endfor
	};

protected:
	static constexpr uint32_t memoryMask =
			DMA_CCR_MSIZE_0  | DMA_CCR_MSIZE_1  |	// MemoryDataSize
			DMA_CCR_MINC                        |	// MemoryIncrementMode
			DMA_CCR_DIR      | DMA_CCR_MEM2MEM; 	// DataTransferDirection
	static constexpr uint32_t peripheralMask =
			DMA_CCR_PSIZE_0  | DMA_CCR_PSIZE_1  |	// PeripheralDataSize
			DMA_CCR_PINC                        |	// PeripheralIncrementMode
			DMA_CCR_DIR      | DMA_CCR_MEM2MEM;  	// DataTransferDirection
	static constexpr uint32_t configmask =
			DMA_CCR_CIRC     |						// CircularMode
			DMA_CCR_PL_1     | DMA_CCR_PL_0;		// Priority

	enum class Interrupt {
		Global = 0x01,
		TransferComplete = 0x02,
		HalfTransferComplete = 0x04,
		Error = 0x08,
		All = 0x0f,
	};
	MODM_FLAGS32(Interrupt);

	using IrqHandler = void (*)(void);

	template <uint32_t ID>
	struct Nvic;
};

%% for channels in dma["channels"]
template <>
struct DmaBase::Nvic<{{ channels.instance }}>
{
	static constexpr IRQn_Type DmaIrqs[] {
	%% for channel in channels.channel
			DMA{{ channels.instance }}_Channel{{ channel.position }}_IRQn,
	%% endfor
	};
};
%% endfor

}	// namespace platform

}	// namespace modm

#endif	// MODM_STM32_DMA_BASE_HPP
