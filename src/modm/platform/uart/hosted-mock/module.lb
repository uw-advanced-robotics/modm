#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

props = {}

class Instance(Module):
    def __init__(self, driver, instance):
        self.driver = driver
        self.instance = int(instance)

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Instance {}".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:mock_uart")

        module.add_option(
            BooleanOption(
                name="buffered",
                description="",
                default=True))
        module.add_option(
            NumericOption(
                name="buffer.tx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=250))
        module.add_option(
            NumericOption(
                name="buffer.rx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=16))

        return True

    def build(self, env):
        device = env[":target"].identifier
        global props
        props["id"] = self.instance
        props["driver"] = self.driver
        props["features"] = self.driver["feature"] if "feature" in self.driver else []
        props["uart_name"] = self.driver["name"].capitalize()

        env.substitutions = props
        env.outbasepath = "modm/src/modm/platform/uart"

        # env.template("uart_hal.hpp.in", "uart_hal_{}.hpp".format(self.instance))
        # env.template("uart_hal_impl.hpp.in", "uart_hal_{}_impl.hpp".format(self.instance))

        env.template("uart.hpp.in", "uart_{}.hpp".format(self.instance))
        env.template("uart.cpp.in", "uart_{}.cpp".format(self.instance))

        props["instances"].append(self.instance)


def init(module):
    module.name = ":platform:mock_uart"
    module.description = "Universal Asynchronous Receiver Transmitter (UART)"

def prepare(module, options):
    device = options[":target"]
    print(device);
    if not (device.has_driver("uart:hosted") or device.has_driver("usart:hosted")):
        return False

    module.depends(
        ":architecture:uart")

    global props
    drivers = (device.get_all_drivers("uart") + device.get_all_drivers("usart"))
    props["instances"] = []

    for driver in drivers:
        for instance in driver["instance"]:
            module.add_submodule(Instance(driver, instance))

    props["target"] = device.identifier

    return True

def build(env):
    device = env[":target"]

    global props
    env.substitutions = props
    env.outbasepath = "modm/src/modm/platform/uart"
