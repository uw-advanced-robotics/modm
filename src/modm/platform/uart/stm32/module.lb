#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

props = {}

class Instance(Module):
    def __init__(self, driver, instance):
        self.driver = driver
        self.instance = int(instance)

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Instance {}".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:uart")

        module.add_option(
            BooleanOption(
                name="buffered",
                description="",
                default=True))
        module.add_option(
            NumericOption(
                name="buffer.tx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=250))
        module.add_option(
            NumericOption(
                name="buffer.rx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=16))
        module.add_option(
            BooleanOption(
                name="usedma",
                description="",
                default=False))

        return True

    def build(self, env):
        device = env[":target"].identifier
        global props
        props["id"] = self.instance
        props["driver"] = self.driver
        props["features"] = self.driver["feature"] if "feature" in self.driver else []
        props["uart_name"] = self.driver["name"].capitalize()

        env.substitutions = props
        env.outbasepath = "modm/src/modm/platform/uart"

        env.template("uart_hal.hpp.in", "uart_hal_{}.hpp".format(self.instance))
        env.template("uart_hal_impl.hpp.in", "uart_hal_{}_impl.hpp".format(self.instance))
        if env["usedma"]:
            env.template("uart_dma.hpp.in", "uart_{}.hpp".format(self.instance))
            env.template("uart_dma.cpp.in", "uart_{}.cpp".format(self.instance))
        else:
            env.template("uart.hpp.in", "uart_{}.hpp".format(self.instance))
            env.template("uart.cpp.in", "uart_{}.cpp".format(self.instance))

        props["instances"].append(self.instance)


def init(module):
    module.name = ":platform:uart"
    module.description = "Universal Asynchronous Receiver Transmitter (UART)"

def prepare(module, options):
    device = options[":target"]
    if not (device.has_driver("uart:stm32*") or device.has_driver("usart:stm32*")):
        return False

    module.depends(
        ":architecture:atomic",
        ":architecture:interrupt",
        ":architecture:register",
        ":architecture:uart",
        ":math:algorithm",
        ":cmsis:device",
        ":platform:gpio",
        ":platform:rcc")

    global props
    drivers = (device.get_all_drivers("uart") + device.get_all_drivers("usart"))
    props["extended_driver"] = ("extended" in drivers[0]["type"])
    props["over8_sampling"] = ("feature" in drivers[0]) and ("over8" in drivers[0]["feature"])
    props["tcbgt"] = ("feature" in drivers[0]) and ("tcbgt" in drivers[0]["feature"])
    props["instances"] = []

    for driver in drivers:
        for instance in driver["instance"]:
            module.add_submodule(Instance(driver, instance))

    shared_irqs = [v["name"] for v in device.get_driver("core")["vector"]]
    shared_irqs = [v for v in shared_irqs if v.startswith("USART") and "_" in v]
    if len(shared_irqs):
        props["shared_irq"] = name = shared_irqs[0]
        parts = name[5:].split("_")
        props["shared_irq_ids"] = range(int(parts[0]), int(parts[1]) + 1)
    else:
        props["shared_irq_ids"] = []

    props["target"] = device.identifier

    return True

def build(env):
    device = env[":target"]

    global props
    env.substitutions = props
    env.outbasepath = "modm/src/modm/platform/uart"
    env.template("uart_base.hpp.in")
    env.template("uart_baudrate.hpp.in")
    if any(i in props["shared_irq_ids"] for i in props["instances"]):
        env.template("uart_shared.cpp.in")
